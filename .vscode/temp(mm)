// mm : (앞서 memlib를 가지고서) 힙 가용 리스트 관리하기

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <unistd.h>
#include <string.h>

#include "mm.h"
#include "memlib.h"

team_t team = {
    /* Team name */
    "ateam",
    /* First member's full name */
    "Harry Bovik",
    /* First member's email address */
    "bovik@cs.cmu.edu",
    /* Second member's full name (leave blank if none) */
    "",
    /* Second member's email address (leave blank if none) */
    ""
};

int mm_init(void);
static void * extend_heap(size_t words);
void mm_free(void *bp);
static void* coalesce(void* bp);
void *mm_malloc(size_t size);
void *mm_realloc(void *ptr, size_t size);
static void* find_fit(size_t asize);
static void place(void* bp, size_t asize);


/* 1. mm_init - 최초 가용 블록으로 힙 생성하기 (힙 초기화) */
int mm_init(void)
{
    // 초기화 된 힙을 생성한다.
    if ((heap_listp = mem_sbrk(4*WSIZE)) == (void *)-1) // 메모리 시스템에서 4워드를 가져와서 빈 가용 리스트를 만든다. (+ 초기화)
        return -1;
    
    PUT(heap_listp, 0);                             // Alignment padding (미사용 패딩)
    PUT(heap_listp + (1*WSIZE), PACK(DSIZE, 1));    // Prologue header
    PUT(heap_listp + (2*WSIZE), PACK(DSIZE, 1));    // Prologue footer
    PUT(heap_listp + (3*WSIZE), PACK(0, 1));        // Epilogue header
    heap_listp += (2*WSIZE);
    // ※ heap_listp는 항상 prologue block을 가리킨다!

    if (extend_heap(CHUNKSIZE/WSIZE) == NULL)       // 힙을 CHUNKSIZE 바이트로 확장하고, 초기 가용 블록을 생성한다.
        return -1;
    return 0;
} // => 어플리케이션으로부터 할당과 반환 요청 받을 준비를 완료한다.

/* 2. extend_heap - 새 가용 블록으로 힙 확장하기 */
static void * extend_heap(size_t words)
{
    char* bp;
    size_t size;
    
    // mm_malloc이 적당한 맞춤 fit을 못 찾았을 때 정렬을 유지하기 위해 2워드의 배수(8바이트)로 반올림하고
    // 메모리 시스템으로부터 추가적인 힙 공간을 요청한다.
    size = (words % 2) ? (words + 1) * WSIZE : words * WSIZE;
    if ((long)(bp = mem_sbrk(size)) == -1)
        return NULL;

    // epilogue와 prologue 블록의 포인터만 변경
    PUT(HDRP(bp), PACK(size, 0));   // 앞선 헤더는 새 가용 블록의 헤더가 되고
    PUT(FTRP(bp), PACK(size, 0));   // 풋터가 되고
    PUT(HDRP(NEXT_BLKP(bp)), PACK(0, 1));   // 이 블록의 마지막 워드는 새 에필로그 블록 헤더가 된다.

    return coalesce(bp);    // 이전 힙이 가용 블록으로 끝났다면, 두 개의 가용 블록을 통합하기 위해 coalesce 함수를 호출하고 통합된 블록의 블록 포인터를 리턴한다.
}

/* 3. mm_free - (이전에 할당한) 블록 반환 */
void mm_free(void *bp)
{
    // 요청한 블록을 반환한다. -> 해당 블록의 사이즈를 알아내어, 헤더와 풋터를 변경한다.
    size_t size = GET_SIZE(HDRP(bp));
    PUT(HDRP(bp), PACK(size, 0));
    PUT(FTRP(bp), PACK(size, 0));
    
    // 만약 앞뒤 블록이 가용상태라면 연결한다.
    coalesce(bp);
}

static char* next_find = NULL;
/* 4. coalesce - 가용 블록 연결 (가용블록들을 경계 태그 연결 기술을 사용해서 통합한다.) */
static void* coalesce(void* bp)
{   
    // bp : free 상태 블록의 payload를 가리키고 있는 포인터
    size_t prev_alloc = GET_ALLOC(FTRP(PREV_BLKP(bp)));
    size_t next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(bp)));
    size_t size = GET_SIZE(HDRP(bp));

    if (prev_alloc && next_alloc) {         /* CASE 1 : 앞/뒤 모두 allocated일 때*/
        next_find = PREV_BLKP(bp);
        return bp;
    }
    else if (prev_alloc && !next_alloc){    /* CASE 2 : 앞 allocated이고, 뒤는 free일 때*/
        size += GET_SIZE(HDRP(NEXT_BLKP(bp)));
        PUT(HDRP(bp), PACK(size, 0));
        PUT(FTRP(bp), PACK(size, 0));

   }
    else if (!prev_alloc && next_alloc) {   /* CASE 3 : 앞 free이고, 뒤는 allcoated일 때*/
        size += GET_SIZE(HDRP(PREV_BLKP(bp)));
        PUT(FTRP(bp), PACK(size, 0));
        PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));
        bp = PREV_BLKP(bp);
    }
    else{                                   /* CASE 4 : 앞/뒤 모두 free일 때*/
        size += GET_SIZE(HDRP(PREV_BLKP(bp))) + GET_SIZE(FTRP(NEXT_BLKP(bp)));
        PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));
        PUT(FTRP(NEXT_BLKP(bp)), PACK(size, 0));
        bp = PREV_BLKP(bp);
    }

    next_find = PREV_BLKP(bp);
    return bp; 
}

/* 5. mm_malloc - 증가된 힙을 동적할당 받는 것 => find_fit! */
void *mm_malloc(size_t size)
{
    size_t asize;       // 정렬 조건과 헤더/푸터 용량을 고려하여 조정된 블록 사이즈
    size_t extendsize;  // 메모리를 할당할 자리가 없을 때 (no fit) 힙을 연장할 크기
    char *bp;

    // 가짜 요청에 대한 처리
    if (size == 0)
        return NULL;

    // 요청한 블록 크기를 조절해서 헤더와 풋터를 위한 공간을 확보하고, 더블워드 조건을 만족시킨다. (최소 16바이트 크기의 블록을 구성)
    if (size <= DSIZE) // 정렬 조건 및 오버 헤드 (헤더, 푸터 크기) 고려하여 블록 사이즈 조정
        asize = 2*DSIZE;
    else
        asize = DSIZE * ((size + (DSIZE) + (DSIZE-1)) / DSIZE);

    // 만일 맞는 블록을 찾으면 할당기는 요청한 블록을 배치하고, (옵션으로 초과부분을 분할하고), 새롭게 할당한 블록을 리턴한다.
    if ((bp = find_fit(asize)) != NULL){
        place(bp, asize);
        return bp;
    }

    // 할당기가 맞는 블록을 찾지 못하면, 힙을 새로운 가용 블록으로 확장하고, 요청한 블록을 이 새 가용 블록에 배치하고 필요한 경우에 블록을 분할하며
    // 이후 새롭게 할당한 블록의 포인터를 리턴한다.
    extendsize = MAX(asize, CHUNKSIZE);
    if((bp = extend_heap(extendsize/WSIZE)) == NULL)
        return NULL;
    place(bp, asize);
    return bp;

}

/* 6. mm_realloc - Implemented simply in terms of mm_malloc and mm_free */
void *mm_realloc(void *ptr, size_t size)
{
    void *oldptr = ptr;
    void *newptr;
    size_t copySize;
    
    newptr = mm_malloc(size);
    if (newptr == NULL)
      return NULL;
    copySize = GET_SIZE(HDRP(oldptr));
    // copySize = *(size_t *)((char *)oldptr - SIZE_T_SIZE);
    if (size < copySize)
      copySize = size;
    memcpy(newptr, oldptr, copySize);
    mm_free(oldptr);
    return newptr;
}

// /* 7. find_fit - first fit 
//     : 힙 시작점부터 탐색해서, 요청에 맞는 첫 번째 블록 발견시 채택한다. (리턴 : 성공 - 주소, 실패 - NULL) */
// static void* find_fit(size_t asize)
// {   
//     void *bp;

//     for (bp = heap_listp; GET_SIZE(HDRP(bp)) > 0; bp = NEXT_BLKP(bp)){  // Epilogue bloack에 도달할 때까지 돌아감
//         if(!GET_ALLOC(HDRP(bp)) && (asize <= GET_SIZE(HDRP(bp)))){  // free 블록이면서, 크기가 더 작을 경우(즉, 들어갈 수 있는 경우)
//             return bp;
//         }
//     }

//     return NULL;
    
// }   


/* next fit */
static void* find_fit(size_t asize)
{
    // 이전 탐색 위치를 보관할 변수 next를 만든다.
    // coalesce 함수가 실행되면, 그 안에서 연결 이후 next의 값을 갱신한다. (case1 -> 안에서 next=bp / case2,3,4 -> return bp 이전, next = bp)
    // 1) for 초기식만 bp = next로 하고 2) return bp 하기 전, next = bp 한다.
    // 나머지는 동일하게 동작한다.

    void *bp = next_find;
    // 1. 이전 탐색 지점부터 ~ 끝
    for(bp = NEXT_BLKP(bp); GET_SIZE(HDRP(bp)) > 0; bp = NEXT_BLKP(bp)){
        if(!GET_ALLOC(HDRP(bp)) && (asize <= GET_SIZE(bp))){
            next_find = bp;
            return bp;
        }
    }
    
    // 2. 1.에서 못 찾은 경우, 앞 부분부터 ~ (이전 탐색 지점)
    bp = heap_listp;
    while(bp < next_find){
        bp = NEXT_BLKP(bp);
        if(!GET_ALLOC(HDRP(bp)) && (asize <= GET_SIZE(bp))){
            next_find = bp;
            return bp;
        }
    }

    // 3. 1.과 2. 모두 없으면 NULL을 리턴한다.
    return NULL;
}

/* 8. place */
static void place(void* bp, size_t asize) 
{
    size_t csize = GET_SIZE(HDRP(bp));

    // ※ 최소 블록 크기는 16바이트이다.
    if((csize - asize) >= (2*DSIZE)){   // 분할 후에 블록의 나머지 크기가 최소 블록 크기와 같거나 크다면 블록을 분할한다.
        PUT(HDRP(bp), PACK(asize, 1));
        PUT(FTRP(bp), PACK(asize, 1));
        bp = NEXT_BLKP(bp);
        PUT(HDRP(bp), PACK(csize-asize, 0));
        PUT(FTRP(bp), PACK(csize-asize, 0));
    }
    else{
        PUT(HDRP(bp), PACK(csize, 1));
        PUT(FTRP(bp), PACK(csize, 1));
    }

}











